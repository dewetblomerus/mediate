defmodule Mediate.Repo.Migrations.CreateThreadsAndThreadUsers do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:threads, primary_key: false) do
      add :id, :bigserial, null: false, primary_key: true
      add :name, :text, null: false
      add :mediator_notes, :text, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :mediator_id,
          references(:users,
            column: :id,
            name: "threads_mediator_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          null: false
    end

    create table(:thread_users, primary_key: false) do
      add :user_id,
          references(:users,
            column: :id,
            name: "thread_users_user_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          primary_key: true,
          null: false

      add :thread_id,
          references(:threads,
            column: :id,
            name: "thread_users_thread_id_fkey",
            type: :bigint,
            prefix: "public",
            on_delete: :delete_all,
            on_update: :update_all
          ),
          primary_key: true,
          null: false
    end
  end

  def down do
    drop constraint(:thread_users, "thread_users_user_id_fkey")

    drop constraint(:thread_users, "thread_users_thread_id_fkey")

    drop table(:thread_users)

    drop constraint(:threads, "threads_mediator_id_fkey")

    drop table(:threads)
  end
end
